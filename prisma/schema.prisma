// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTION_STRING")
}

enum UserRole {
  CUSTOMER
  PHOTOGRAPHER
  ADMIN
}

model User {
  id                 String            @id @default(cuid())
  name               String
  email              String            @unique
  emailVerified      Boolean           @default(false)
  emailCode          String? // Code to verify email
  emailCodeSentAt    DateTime?
  emailVerifiedAt    DateTime?
  password           String // bcrypt hash
  passwordCode       String? // Code to reset password
  passwordCodeSentAt DateTime?
  passwordResetAt    DateTime?
  bio                String?
  role               UserRole          @default(CUSTOMER)
  phone              String
  phoneCode          String?
  phoneCodeSentAt    DateTime?
  phoneVerified      Boolean           @default(false)
  phoneVerifiedAt    DateTime?
  profileImageUrl    String?
  coverImageUrl      String?
  businessName       String?
  instagramUsername  String?
  facebookUsername   String?
  xUsername          String?
  websiteUrl         String?
  lastAccessAt       DateTime?
  events             Event[]
  isBlocked          Boolean           @default(false)
  createdAt          DateTime          @default(now())
  photosSelections   PhotosSelection[] @relation("UserPhotosSelection")

  @@index([id, email], name: "idx_user_id_email")
  @@index([instagramUsername], name: "idx_user_instagramUsername")
  @@index([name], name: "idx_user_name")
  @@index([role], name: "idx_user_role")
}

model Event {
  id               String            @id @default(cuid())
  title            String
  description      String
  isPublic         Boolean           @default(false)
  date             DateTime
  addressName      String?
  address          String?
  number           String?
  address2         String?
  neighborhood     String?
  city             String
  state            String
  country          String
  zipCode          String?
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  photosSelections PhotosSelection[] @relation("EventPhotosSelection")
  emailsAccess     String?
  accessHash       String?           @unique
  pricePerPhoto    Float             @default(0.0)
  currency         String            @default("BRL")
  photos           Photo[]           @relation("EventPhotos")
  relevanceScore   Float             @default(0.0)
  isFeatured       Boolean           @default(false)
  isActive         Boolean           @default(true)
  isArchived       Boolean           @default(false)
  publishAt        DateTime?
  unpublishAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt

  @@index([id, title, date, userId], name: "idx_event_id_title_date_userId")
  @@index([city, state, country], name: "idx_event_city_state_country")
  @@index([userId, date], name: "idx_event_userId_date")
  @@index([addressName], name: "idx_event_addressName")
  @@index([isPublic], name: "idx_event_isPublic")
  @@index([isFeatured], name: "idx_event_isFeatured")
  @@index([isActive], name: "idx_event_isActive")
  @@index([relevanceScore], name: "idx_event_relevanceScore")
}

model Photo {
  id          String   @id @default(cuid())
  url         String
  fileName    String?
  fileId      String?
  altText     String?
  display     Boolean  @default(true)
  isCover     Boolean  @default(false)
  isWatermark Boolean  @default(true)
  isOriginal  Boolean  @default(false)
  event       Event    @relation("EventPhotos", fields: [eventId], references: [id])
  eventId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([id, url, eventId], name: "idx_photo_id_url_eventId")
  @@index([isCover], name: "idx_photo_isCover")
  @@index([display], name: "idx_photo_display")
}

model PhotosSelection {
  id          String   @id @default(cuid())
  name        String
  photosList  String
  totalPhotos Int      @default(0)
  totalPrice  Float    @default(0.0)
  isReady     Boolean  @default(true)
  user        User     @relation("UserPhotosSelection", fields: [userId], references: [id])
  userId      String
  event       Event    @relation("EventPhotosSelection", fields: [eventId], references: [id])
  eventId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([id, name, userId], name: "idx_photosSelection_id_name_userId")
  @@index([eventId], name: "idx_photosSelection_eventId")
  @@index([userId], name: "idx_photosSelection_userId")
}
